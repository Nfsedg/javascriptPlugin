{"version":3,"sources":["ejercicios/observer/indes.ts"],"names":[],"mappings":"AASA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGI,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAuB,EAAvB;AAGI,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AACzB,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACH,KAFD;AAGH;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAW,QAAX,EAA6B;AACzB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH,GAFD;;AAGA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC1B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACtC,aAAO,GAAG,KAAK,QAAf;AACH,KAFa,CAAd;AAIA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACH,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAAxD;AACH,GAFD;;AAGJ,SAAA,YAAA;AAxBA,CAAA,EAAA;;AA0BA,IAAA,YAAA;AAAA;AAAA,YAAA;AAEI,WAAA,YAAA,GAAA;AACI,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACH;;AACD,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACH,GAFD;;AAGJ,SAAA,YAAA;AARA,CAAA,EAAA;;AAUA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CACN,YAAA;AAAM,SAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAD1B,EAEN,IAFM,CAAV","file":"indes.c2804e18.js","sourceRoot":"..","sourcesContent":["interface Observer {\n    update: (data: any) => void\n}\n\ninterface Subject {\n    subscribe: (observer: Observer) => void\n    unsubscribe: (observer: Observer) => void\n}\n\nclass BitcoinPrice implements Subject {\n    observers: Observer[] =[]\n\n    constructor() {\n        const el: HTMLInputElement = document.querySelector('#value')\n        el.addEventListener('input', () => {\n            this.notify(el.value);\n        })\n    }\n\n    subscribe (observer: Observer) {\n        this.observers.push(observer)\n    }\n    unsubscribe(observer: Observer) {\n        const index = this.observers.findIndex(obs => {\n            return obs === observer\n        })\n\n        this.observers.splice(index, 1);\n    }\n\n    notify(data: any) {\n        this.observers.forEach(observer => observer.update(data))\n    }\n}\n\nclass PriceDisplay implements Observer {\n    private el: HTMLElement;\n    constructor() {\n        this.el = document.querySelector(\"#price\")\n    }\n    update(data: any) {\n        this.el.innerText = data\n    }\n}\n\nconst value = new BitcoinPrice\nconst display = new PriceDisplay\n\nvalue.subscribe(display)\n\nsetTimeout(\n    () => value.unsubscribe(display),\n    5000\n)\n"]}